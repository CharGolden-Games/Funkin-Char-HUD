// Flixel
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;

// Haxe
import haxe.Json;

// OpenFL
import openfl.utils.Assets;

// Funkin
import funkin.Paths;
import funkin.Highscore;
import funkin.modding.module.Module;
import funkin.play.PlayState;
import funkin.ui.freeplay.FreeplayState;

class JudgementText extends Module
{
    var game:PlayState = null;
    var globalYOffset:Int = 0;    // change this to change how high the judgeText appears.
    var globalXOffset:Int = 0;    // change this to change how far right the judgeText appears.

    public function new()
    {
        super('Judgement Text - Char HUD');
    }

    var judgeText:FlxText;
    var textTween:FlxTween;

    function killShit()
    {
        try {
            if (textTween != null)
                textTween.cancel();

            if (judgeText != null)
            {
                judgeText.destroy();
                judgeText = null;
            }
        }
        catch(e:Dynamic)
        {
            return;
        }
    }

    // Score shiz
    var totalHit:Int = 0;
    var totalPlayed:Int = 0;
    var sicks:Int = 0;
    var goods:Int = 0;
    var bads:Int = 0;
    var shits:Int = 0;
    var misses:Int = 0;
    var maxCombo:Int = 0;

    
    // Settings
    var simpleRatings:Bool = false;
    var doFading:Bool = false;

    public function onCountdownStart(event:CountdownScriptEvent)
    {
        checkSettings();
        getOffsets();
        game = PlayState.instance;
        if (game.isInCutscene) return;
        
        if (textTween != null)
        {
            textTween.cancel();
        }
        totalHit = 0;
        totalPlayed = 0;
        sicks = 0;
        goods = 0;
        bads = 0;
        shits = 0;
        misses = 0;
        maxCombo = 0;
        if (judgeText != null)
        {
            judgeText.destroy();
            judgeText = null;
        }
                
        judgeText = new FlxText(0, 0, 0, 'Sicks: 0\nGoods: 0\nBads: 0\nShits: 0\nMax Combo: 0');
        if (!simpleRatings)
        {
            judgeText.text += '\nResult Rating: N/A';
        }
        judgeText.setFormat(Paths.font('vcr.ttf'), 16, 0xFFFFFFFF, "left", FlxTextBorderStyle.OUTLINE, 0xFF000000);
        judgeText.borderSize = 2;
        judgeText.cameras = [game.camHUD];
        game.add(judgeText);
        judgeText.screenCenter(0x10);
        judgeText.x += globalXOffset;
        judgeText.y += globalYOffset;
        judgeText.alpha = doFading ? 0 : 1;
    }

    public function onUpdate(event:UpdateScriptEvent)
    {
        if (game == null) return;
        if (Highscore.tallies.combo > maxCombo)
        {
            maxCombo = Highscore.tallies.combo;
            updateText();
        }
    }

    function tallyUpScore():String
    {
        var accuracy = totalHit / totalPlayed;
        
        return Std.string(Math.floor(Math.floor((accuracy * 100) * 100) / 100));
    }

    function updateText()
    {
        if (judgeText != null)
        {
            judgeText.text = 'Sicks: ' + Std.string(sicks)
            + '\nGoods: '+ Std.string(goods)
            + '\nBads: ' + Std.string(bads)
            + '\nShits: ' + Std.string(shits)
            + '\nMax Combo: ' + Std.string(maxCombo);
            if (!simpleRatings)
            {
                judgeText.text += '\nResult Rating: ' + tallyUpScore() + '%';
                if (goods == 0 && bads == 0 && shits == 0) judgeText.text += ' (Gold Perfect)';
                else if (bads == 0 && shits == 0 && misses == 0) judgeText.text += ' (Perfect)';
            }
        }
    }

    public function onSongStart(event:ScriptEvent)
    {
        if (doFading) textTween = FlxTween.tween(judgeText, {alpha: 1}, 0.5, {ease: FlxEase.linear});
    }

    public function onNoteHit(event:HitNoteScriptEvent)
    {
        if (event.judgement != 'perfect')
        {
            totalPlayed++;
            if (event.judgement == 'sick' || event.judgement == 'good')
            {
                totalHit++;
            }
            switch (event.judgement)
            {
                case 'sick':
                    sicks++;
                case 'good':
                    goods++;
                case 'bad':
                    bads++;
                case 'shit':
                    shits++;
            }
            updateText();
        }
    }

    function checkSettings()
        {
            if (!Assets.exists('assets/data/vsCharHud/settings.json'))
            {
                simpleRatings = false;
                doFading = false;
            }
            else
            {
                try
                {
                    var settings:Dynamic = Json.parse(Assets.getText('assets/data/vsCharHud/settings.json'));
    
                    simpleRatings = settings.simpleRatings;
                    doFading = settings.doFading;
                }
                catch(e:Dynamic)
                {
                    trace('Shit there was an error grabbing mod settings! `' + Std.string(e) + '`');
    
                    simpleRatings = false;
                    doFading = false;
                }
            }
        }

    public function onNoteMiss(event:NoteScriptEvent)
    {
        totalPlayed++;
        misses++;
        updateText();
    }
    
    public function onSubStateOpenBegin(event):Void 
    {
        super.onSubStateOpenBegin(event);
        
        if (Std.isOfType(event.targetState, FreeplayState))
        {
            killShit();
        }
    }

    var tweenOut:FlxTween;
    public function onSongRetry(event:ScriptEvent)
    {
        game = null;
        if (textTween != null) textTween.cancel();
        if (tweenOut != null) tweenOut.cancel();
        if (judgeText != null) tweenOut = FlxTween.tween(judgeText, {alpha: 0}, 0.5, {ease: FlxEase.linear});
    }

   public function getOffsets()
   {
        if (!Assets.exists('assets/data/hudOffsets.json'))
        {
            globalYOffset = -105; // High offset for this modpack specifically!
            globalXOffset = 0;
        }
        else
        {
            try
            {
                var offset:Array<Int> = Json.parse(Assets.getText('assets/data/hudOffsets.json')).judgeText;
    
                globalXOffset = offset[0];
                globalYOffset = offset[1];
            }
            catch(e:Dynamic)
            {
                trace('Shit there was an error grabbing mod settings! `' + Std.string(e) + '`');
    
                globalYOffset = -105; // High offset for this modpack specifically!
                globalXOffset = 0;
            }
        }
   }
}